import copy
import random

class RandomAgent():
    def __init__(self):
        super().__init__()

    def do_card_check(self, cards):
        return [True, True, True, True]

    def do_turn(self, player):
        while True:
            attack_minions = [minion for minion in filter(lambda minion: minion.can_attack(), player.minions)]
            if player.hero.can_attack():
                attack_minions.append(player.hero)
            playable_cards = [card for card in filter(lambda card: card.can_use(player, player.game), player.hand)]
            if player.hero.power.can_use():
                possible_actions = len(attack_minions) + len(playable_cards) + 1
            else:
                possible_actions = len(attack_minions) + len(playable_cards)
            if possible_actions > 0:
                action = random.randint(0, possible_actions - 1)
                if player.hero.power.can_use() and action == possible_actions - 1:
                    player.hero.power.use()
                elif action < len(attack_minions):
                    attack_minions[action].attack()
                else:
                    player.game.play_card(playable_cards[action - len(attack_minions)])
            else:
                return


    def do_turn(self, player, game):
        def score(game):
            return random.randint(0, 100)
        actual_game = game
        best_game = game
	
        for x in range (0, 100):
            while True:
                attack_minions = [minion for minion in filter(lambda minion: minion.can_attack(), player.minions)]
                if player.hero.can_attack():
                    attack_minions.append(player.hero)
                playable_cards = [card for card in filter(lambda card: card.can_use(player, player.game), player.hand)]
                if player.hero.power.can_use():
                    possible_actions = len(attack_minions) + len(playable_cards) + 1
                else:
                    possible_actions = len(attack_minions) + len(playable_cards)
                if possible_actions > 0:
                    action = random.randint(0, possible_actions - 1)
                    if player.hero.power.can_use() and action == possible_actions - 1:
                        player.hero.power.use()
                    elif action < len(attack_minions):
                        attack_minions[action].attack()
                    else:
                        player.game.play_card(playable_cards[action - len(attack_minions)])
                else:
                    if score(best_game)<score(game):
                        best_game=game
                    game=actual_game
                    player=game.current_player
                    break
        game=best_game
		       

    def choose_target(self, targets):
        return targets[random.randint(0, len(targets) - 1)]

    def choose_index(self, card, player):
        return random.randint(0, len(player.minions))

    def choose_option(self, *options):
        return options[random.randint(0, len(options) - 1)]
